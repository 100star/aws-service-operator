// >>>>>>> DO NOT EDIT THIS FILE <<<<<<<<<<
// This file is autogenerated via `aws-operator generate`
// If you'd like the change anything about this file make edits to the .templ
// file in the pkg/codegen/assets directory.

package cloudformationtemplate

import (
	"reflect"

	"github.com/christopherhein/aws-operator/pkg/config"
	opkit "github.com/christopherhein/operator-kit"
	apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	"k8s.io/client-go/tools/cache"

	awsapi "github.com/christopherhein/aws-operator/pkg/apis/operator.aws"
	awsV1alpha1 "github.com/christopherhein/aws-operator/pkg/apis/operator.aws/v1alpha1"
	awsclient "github.com/christopherhein/aws-operator/pkg/client/clientset/versioned/typed/operator.aws/v1alpha1"
	"github.com/christopherhein/aws-operator/pkg/customizations/cloudformationtemplate"
)

// Resource is the object store definition
var Resource = opkit.CustomResource{
	Name:    "cloudformationtemplate",
	Plural:  "cloudformationtemplates",
	Group:   awsapi.GroupName,
	Version: awsapi.Version,
	Scope:   apiextensionsv1beta1.NamespaceScoped,
	Kind:    reflect.TypeOf(awsV1alpha1.CloudFormationTemplate{}).Name(),
	ShortNames: []string{
		"cft",
		"cfts",
		"cfn",
		"cfns",
		"cloudformation",
	},
}

// Controller represents a controller object for object store custom resources
type Controller struct {
	config       *config.Config
	context      *opkit.Context
	awsclientset awsclient.OperatorV1alpha1Interface
	topicARN     string
}

// NewController create controller for watching object store custom resources created
func NewController(config *config.Config, context *opkit.Context, awsclientset awsclient.OperatorV1alpha1Interface) *Controller {
	return &Controller{
		config:       config,
		context:      context,
		awsclientset: awsclientset,
	}
}

// StartWatch watches for instances of Object Store custom resources and acts on them
func (c *Controller) StartWatch(namespace string, stopCh chan struct{}) error {
	resourceHandlers := cache.ResourceEventHandlerFuncs{
		AddFunc:    c.onAdd,
		UpdateFunc: c.onUpdate,
		DeleteFunc: c.onDelete,
	}

	restClient := c.awsclientset.RESTClient()
	watcher := opkit.NewWatcher(Resource, namespace, resourceHandlers, restClient)
	go watcher.Watch(&awsV1alpha1.CloudFormationTemplate{}, stopCh)

	return nil
}

func (c *Controller) onAdd(obj interface{}) {
	s := obj.(*awsV1alpha1.CloudFormationTemplate).DeepCopy()
	cloudformationtemplate.OnAdd(c.config, s)
}

func (c *Controller) onUpdate(oldObj, newObj interface{}) {
	oo := oldObj.(*awsV1alpha1.CloudFormationTemplate).DeepCopy()
	no := newObj.(*awsV1alpha1.CloudFormationTemplate).DeepCopy()

	if no.Status.ResourceStatus == "DELETE_COMPLETE" {
		c.onAdd(no)
	}
	cloudformationtemplate.OnUpdate(c.config, oo, no)
}

func (c *Controller) onDelete(obj interface{}) {
	s := obj.(*awsV1alpha1.CloudFormationTemplate).DeepCopy()
	cloudformationtemplate.OnDelete(c.config, s)
}
